* Scala notes

weaves

* Programming Scala, 2nd Edition

http://www.scala-lang.org/api/2.11.8/index.html

SBT

http://www.scala-sbt.org/0.13/docs/Commands.html

Source code

https://github.com/scala/scala/tree/v2.12.2

** scala-mode-el and sbt-mode-el

I've extended these to use SBT and to step when possible.

*** ctags, etags and TAGS

You need to use ctags-exuberant and add to .ctags a language definition for
scala.

** Using

*** sbt 

Is quite heavy to use. So it's best to work with it via a console and
re-submit commands to it.

**** Setting main

For a project that has multiple mains, to just compile and run one of them use

 > set mainClass in (Compile, run) := Some("progscala2.objectsystem.CommandArgs")
 > run -i input.txt -o output.txt

**** Traps and Exit

sbt runs in a JVM, when an application is run, a call to System.exit(0)
will exit the JVM of sbt. To avoid that, sbt has a trapExit setting, that
is by default true.

The run will end with:

 Exception: sbt.TrapExitSecurityException thrown from the UncaughtExceptionHandler in thread "run-main-2"

***** Using trapExit

If you don't want the message and don't mind having to restart sbt, then
unset the trap

 > set trapExit := false

but that will exit the sbt shell.

***** Using fork

You can achieve the same by not forking.

***** Forking for Tests

There is a issue with using some Java classes in test/. Particularly,
locating resources.

The problem appears to be that the SBT thread does not resolve run time
class loads back to the JVM (the missing resources are provided by rt.jar
and resources.jar). This can be fixed by forcing the SBT thread to fork new
threads for each test by putting the following instruction into the main
body of the SBT build file,

fork in Test := true

*** Test

Easy to invoke.

 sbt test
 sbt test-only example.CSV

*** Document

Easy to invoke.

 sbt doc

** Scripts

I've concatenated the scripts '*.sc' in each directory and put them into
misc/. The files as merged aren't necessarily in the right order, so I need
to correct that.

Working through these, re-ordering, testing and correcting as I go.

*** Shell Scripts

To run a scala script from the command line, see

 src/main/scala/progscala2/toolslibs/secho

To run a main() method from within sbt use a variant of this

 progscala2.concurrency.akka.AkkaClient.main(Array[String]())

*** intro0.sc

Is a basic overview, written by me from the old textbook.

*** typelessdomore.sc

Quick introduction to many features. Shows recursion and requirement for a
return value type.

The equals sign use for the assignment of some executable code for a
function.

There's a simple background thread-processing example. Uses

 import scala.concurrent.ExecutionContext.Implicits.global

*** recursion.sc

Shows use of the Trampoline.

*** valuetypes.sc

Demonstrates dynamic typing based on object instantiation.

New 'curried' method (replacing 'curry').

*** toolslib.sc

I don't know what this is supposed to show, but one very simple example.

*** structuraltypes.sc

Demonstrates how to use and notify observers. Issue with reflective calls
requires an import.

*** traits.sc

Use of the with keyword in the first example.

Then a sequence of examples that work with Observers. Doesn't seem to
demonstrate any different lanuage features.

*** basics.sc

Functional object programming. The design idea is that you implement
objects and pass them as configurations to a functional programming pipeline.

This demonstrates how to pass functions to the map and reduce
methods. Functions can be passed via a companion object.

*** selftype.sc

This demonstrates another typedef like feature. The self alias allows one
to refer to the object itself (like this).

There's a second example (the cake pattern) that demonstrates this to code
against abstract interfaces.

*** safeseq.sc

This demonstrates a new Seq type.

*** rounding.sc

This is basic. Demonstrates loops, for-yield, enumerations.

Illustrates StdLogging.

*** linearization.sc

This is an explanation of Linearization. The order in which objects are
constructed and the order in which in they are carried out.

https://www.scala-lang.org/files/archive/spec/2.11/05-classes-and-objects.html#definition:-linearization

*** process.sc

How to invoke operating system methods.

http://www.scala-lang.org/api/2.11.8/index.html#scala.sys.process.package

Instances of the java classes java.io.File and java.net.URL can both be
used directly as input to other processes, and java.io.File can be used as
output as well. One can even pipe one to the other directly without any
intervening process, though that's not a design goal or recommended usage.

*** overrides.sc

How to side-step issues with instantiation in a base trait (or class) using lazy.

Useful example of a case class in here. This is the explanation. A case
class has a companion object defined with it that supports an apply and an
unapply method. A copy() method is added to.

And of course, it overrides the scala.AnyRef methods too.

https://www.scala-lang.org/files/archive/spec/2.11/05-classes-and-objects.html#case-classes

object c {
  def apply[tps](ps1)…(psn): c[tps] = new c[Ts](xs1)…(xsn)
  def unapply[tps](x: c[tps]) =
    if (x eq null) scala.None
    else scala.Some(x.xs11,…,x.xs1k)
}

class Expr
case class Var   (x: String)          extends Expr
case class Apply (f: Expr, e: Expr)   extends Expr
case class Lambda(x: String, e: Expr) extends Expr

type Env = String => Value
case class Value(e: Expr, env: Env)

def eval(e: Expr, env: Env): Value = e match {
  case Var (x) =>
    env(x)
  case Apply(f, g) =>
    val Value(Lambda (x, e1), env1) = eval(f, env)
    val v = eval(g, env)
    eval (e1, (y => if (y == x) v else env1(y)))
  case Lambda(_, _) =>
    Value(e, env)
}

*** patternmatching.sc

This is illustrates some useful constructs for using regular expressions.

A nice recursive pair processing construct.

http.sc demonstrates a method dispatcher based on class type.

match-types.sc and match-types2 don't work because of the Java class
erasure for generics, but it is implemented in a workable way in types2.

match-deep.sc is a use of wild-cards in a match for deeper structures.

match-surprise.sc there is an important trick here: using back-ticks to
access the `y` parameter.

match-deep2.sc demonstrates how to use another assignment operator @
(probably a label), to set up a "p" variable after the matching, the
variable can then be used in the following block.

*** metaprogramming.sc

Mostly about the reflective features of Scala and Java.

(There's a name-clash in reflect.sc trait T with later use of T for type.)

match-type-types.sc shows how to compare types
programmatically. Especially, the types of generics. Similar to the
construct in a C++ template to record the types used.

This warning pops up.

<console>:16: warning: a type was inferred to be `AnyVal`; this may indicate a programming error.
       toType(Seq(1, true, 3.14))

The Type class supports test operators

 toType(1) <:< typeOf[AnyVal]           // => true

There is no >:> you have to turn the arguments around.

There's a toType2() that uses an implicit, it returns the same as toType.

toTypeRefInfo() demonstrates that typeOf can return more information.

* futures.sc

Demonstrates backgrounding tasks with Future.
How to return success or failure.

* async.sc

How to background parts of sequences using async and await {} blocks.

* Essential Scala

Assorted notes from Marius Eriksen marius@twitter.com

http://twitter.github.io/effectivescala/

And he refers to https://docs.scala-lang.org/tour/tour-of-scala.html

** Variance

"Variance arises when generics are combined with subtyping. Variance defines
how subtyping of the contained type relates to subtyping of the container
type. Because Scala has declaration site variance annotations, authors of
common libraries — especially collections — must be prolific annotators."

* Using collection methods

** Using apply

f(x) is supposed to be

f apply x

But this results in 

<console>:14: error: missing argument list for method f
Unapplied methods are only converted to functions when a function type is expected.
You can make this conversion explicit by writing `f _` or `f(_)` instead of `f`.
       f apply "foo"

However, you can use the identity method like this with compose

If

 def f(x: String) = "f(" + x + ")"

val f0 = identity[String] _ compose f _

Then

 f0 apply "foo"

** reduce

See fscal0.sc

** src/main/scala/progscala2/concurrency/akka/AkkaClient.scala

Good example of a nearly complete application.

Notice the use of the ActorSystem. This loads a configuration file.

Using the ConfigFactory component, see, for example

 https://danielasfregola.com/2015/06/01/loading-configurations-in-scala/

The Akka component is described here

 http://doc.akka.io/docs/akka/2.5.4/scala/actors.html

progscala2.concurrency.akka.AkkaClient.main(Array[String]())

Akka has very extensive features for real-time control.

*** Logging

The logging is provided by typesafe

 https://github.com/typesafehub/scala-logging

The configuration is given in

 src/main/resources/logback.xml

And there are defined just a few debuggers.

With an import

 import com.typesafe.scalalogging.Logger

 scala> val logger = Logger("progscala2.concurrency.akka")
 logger: com.typesafe.scalalogging.Logger = com.typesafe.scalalogging.Logger@681d490a

 scala> logger.debug("debug")

 scala> logger.info("info")
 17:15:37 INFO  [] - info

* Akka

https://github.com/akka/akka-samples

Very comprehensive Actor paradigm.

These use sbt and multi-jvm testing

 > multi-jvm:test
 > multi-jvm:test-only sample.distributeddata.ReplicatedMetricsSpec

** Finite state machines - replicated data




* Postamble

** This file's Emacs file variables

[  Local Variables: ]
[  mode:text ]
[  mode:outline-minor ]
[  mode:auto-fill ]
[  fill-column: 75 ]
[  coding: iso-8859-1-unix ]
[  comment-column:50 ]
[  comment-start: "[  "  ]
[  comment-end:"]" ]
[  End: ]

